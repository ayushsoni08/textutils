{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","Fragment","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","onChange","event","console","log","target","value","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","about","App","setMode","_useState3","_useState4","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.8ed81bac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div >\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarScroll\" aria-controls=\"navbarScroll\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n                        <ul className=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                            </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\" role=\"search\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-dark\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n                        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: 'About text here'\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"onChange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase clicked\", text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        console.log(\"lowercase clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"text Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    //text = \"enter text here2\";  //wrong way to set state\r\n    // setText(\"new text\");\r\n    return (\r\n        <>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-2\">\r\n                    <textarea className=\"form-control\" onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#414141' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} value={text} id=\"myBox\" rows=\"7\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-sm btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-sm btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-sm btn-primary \" onClick={handleClearText}>Clear Text</button>\r\n                <button className=\"btn btn-sm btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h3>Your text summary</h3>\r\n                <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview here\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n} ","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//import About from './components/About';\n\n//import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#414141';\n      showAlert(\" Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\"\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\" Dark mode has been disabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n  return (\n    // <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" />\n    // <Navbar />\n    <>\n      {/* <Router>\n        <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path='/about' element={<About />} />\n            <Route exact path='/' element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />} />\n          </Routes>\n        </div>\n      </Router> */}\n\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}